Assumptions:

1. The plugin will be compatible with WordPress 5.0 and above.
2. The API endpoint is a RESTful API that accepts POST requests with JSON data.
3. The API key is used for authentication with the API endpoint.
4. The chat interface will use AJAX to send and receive messages without refreshing the page.
5. The chat interface will be embedded in a WordPress page using a shortcode.

Core Classes, Functions, and Methods:

1. `Chat_Plugin`: The main plugin class. It will handle the initialization and registration of the plugin with WordPress.
2. `enqueue_styles()`: A method in `Chat_Plugin` to enqueue the CSS files for the chat interface.
3. `enqueue_scripts()`: A method in `Chat_Plugin` to enqueue the JavaScript files for the chat interface.
4. `register_settings()`: A method in `Chat_Plugin` to register the plugin settings with WordPress.
5. `display_settings()`: A method in `Chat_Plugin` to display the settings page in the WordPress admin area.
6. `shortcode()`: A method in `Chat_Plugin` to register the shortcode for embedding the chat interface in a WordPress page.
7. `ajax_send_message()`: A function to handle the AJAX request for sending a message to the API endpoint.
8. `ajax_receive_message()`: A function to handle the AJAX request for receiving a message from the API endpoint.

Now, let's write the code for each file.

chat-plugin.php
```php
<?php
/*
Plugin Name: Chat Plugin
Description: A modern chat interface for WordPress.
Version: 1.0
Author: Your Name
*/

if (!defined('WPINC')) {
    die;
}

require_once plugin_dir_path(__FILE__) . 'includes/class-chat-plugin.php';

function run_chat_plugin() {
    $plugin = new Chat_Plugin();
    $plugin->run();
}

run_chat_plugin();
```

includes/class-chat-plugin.php
```php
<?php

class Chat_Plugin {

    public function __construct() {
        add_action('admin_menu', array($this, 'add_plugin_page'));
        add_action('admin_init', array($this, 'register_settings'));
        add_action('wp_enqueue_scripts', array($this, 'enqueue_styles'));
        add_action('wp_enqueue_scripts', array($this, 'enqueue_scripts'));
        add_shortcode('chat_plugin', array($this, 'shortcode'));
    }

    public function run() {
        add_action('wp_ajax_send_message', 'ajax_send_message');
        add_action('wp_ajax_nopriv_send_message', 'ajax_send_message');
        add_action('wp_ajax_receive_message', 'ajax_receive_message');
        add_action('wp_ajax_nopriv_receive_message', 'ajax_receive_message');
    }

    public function add_plugin_page() {
        add_options_page(
            'Chat Plugin Settings',
            'Chat Plugin',
            'manage_options',
            'chat-plugin',
            array($this, 'display_settings')
        );
    }

    public function register_settings() {
        register_setting('chat_plugin', 'api_key');
        register_setting('chat_plugin', 'chat_color');
    }

    public function display_settings() {
        // Display the settings page in the WordPress admin area.
    }

    public function enqueue_styles() {
        wp_enqueue_style('chat_plugin', plugins_url('css/chat-plugin.css', __FILE__));
    }

    public function enqueue_scripts() {
        wp_enqueue_script('chat_plugin', plugins_url('js/chat-plugin.js', __FILE__), array('jquery'), '1.0', true);
        wp_localize_script('chat_plugin', 'ajax_object', array('ajax_url' => admin_url('admin-ajax.php')));
    }

    public function shortcode() {
        // Display the chat interface in a WordPress page.
    }
}
```

includes/ajax-functions.php
```php
<?php

function ajax_send_message() {
    // Send a message to the API endpoint.
}

function ajax_receive_message() {
    // Receive a message from the API endpoint.
}
```

css/chat-plugin.css
```css
/* CSS code for the chat interface. */
```

js/chat-plugin.js
```javascript
jQuery(document).ready(function($) {
    // JavaScript code for the chat interface.
});
```

Please note that you need to replace the comments in the `display_settings()`, `shortcode()`, `ajax_send_message()`, and `ajax_receive_message()` functions with the actual code. The CSS and JavaScript code for the chat interface also need to be written based on your specific design and aesthetic preferences.